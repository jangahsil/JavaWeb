<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
    	http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">


	<!-- <bean id="prince" class="com.newlecture.web.dao.mybatis.MyBatisNoticeDao"/> 
		넌 왕자 : 메인업무 <bean id="logBeforeAdvice" class="com.newlecture.web.aop.LogBeforeAdvice"/> 
		<bean id="logAroundAdvice" class="com.newlecture.web.aop.LogAroundAdvice"/> 
		넌 보조업무 원하는 녀석만으로 한정 <bean id="noticePointcut" class="org.springframework.aop.support.NameMatchMethodPointcut"> 
		<property name="mappedNames"> <list> <value>getNotices</value> </list> </property> 
		</bean> <bean id="noticeAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor"> 
		<property name="pointcut" ref="noticePointcut"></property> <property name="advice" 
		ref="logBeforeAdvice"></property> </bean> <bean id="noticeDao" class="org.springframework.aop.framework.ProxyFactoryBean"> 
		넌 proxy : 보조업무와 주업무를 모두 가지고 호출 <property name="target" ref="prince"/> 프락시에 
		target을 꽂아줌 <property name="interceptorNames"> <list> <value>noticeAdvisor</value> 
		<value>logBeforeAdvice</value> <value>logAroundAdvice</value> 보조업무 끼는 중 </list> 
		</property> </bean> -->

	<!-- id는 url -->
	<!-- <bean id="/customer/notice" class="com.newlecture.web.controller.SpringNoticeController"></bean> -->
	<!-- more bean definitions for services go here -->

	<!-- controller를 찾을때 패키지를 참조하게 해줌, 설정은 어노테이션으로~ -->
	<context:component-scan base-package="com.newlecture.web.controller" />

	<!-- 사용자 요청 중, 리소스를 다이렉트로 처리하기 위한 처리기 설정방법 , 예외영역 -->
	<mvc:annotation-driven />
	<mvc:resources mapping="/resource/**" location="/resource/"></mvc:resources>

	<!-- multipart 처리를 위함 -->
	<bean name="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="100000000"></property>
	</bean>
	
	<bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions" value="/WEB-INF/tiles.xml"></property> 
	</bean>
	
	<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass">
			<value>
				org.springframework.web.servlet.view.tiles3.TilesView
			</value>
		</property>
	</bean>

<!-- 	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver"></property>
		<property name="url"
			value="jdbc:sqlserver://211.238.142.250:1433;database=newlecdb"></property>
		<property name="username" value="sist"></property>
		<property name="password" value="classf"></property>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations"
			value="classpath:com/newlecture/web/dao/mybatis/mapper/*.xml" />
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="noticeDao" class="com.newlecture.web.dao.mybatis.MyBatisNoticeDao" />
	<bean id="noticeFileDao" class="com.newlecture.web.dao.mybatis.MyBatisNoticeFileDao" /> -->

</beans>
